from typing import Sequence

import numpy as np
import cv2
import skimage
from skimage.morphology import skeletonize

from cv2.typing import MatLike
from numpy.typing import NDArray

from fingerprint_enhancer import enhance_Fingerprint
from fingerprint_feature_extractor import extract_minutiae_features




class Fingerprint:
    def __init__(self, img: MatLike):
        self.img = img
        self.enhanced_img = enhance_Fingerprint(img)
        self.skeleton_img = np.uint8(skeletonize(self.enhanced_img)) * 255
        self.terminations, self.bifurcations = extract_minutiae_features(
            self.enhanced_img
        )

        self.kp, self.desc = self.extract_sift_features()
        self.result_img = cv2.cvtColor(self.skeleton_img, cv2.COLOR_GRAY2BGR)
        for t in self.terminations:
            (rr, cc) = skimage.draw.circle_perimeter(t.locX, t.locY, 3)
            skimage.draw.set_color(self.result_img, (rr, cc), (0, 0, 255))
        for b in self.bifurcations:
            (rr, cc) = skimage.draw.circle_perimeter(b.locX, b.locY, 3)
            skimage.draw.set_color(self.result_img, (rr, cc), (255, 0, 0))
   
    def extract_sift_features(self):
        sift = cv2.SIFT_create()
        kp, desc = sift.detectAndCompute(self.enhanced_img, None)
        return kp, desc

def match_fingerprints(fp1: Fingerprint, fp2: Fingerprint):
    # FLANN parameters
    FLANN_INDEX_KDTREE = 1
    index_params = dict(algorithm=FLANN_INDEX_KDTREE, trees=5)
    search_params = dict(checks=50)

    flann = cv2.FlannBasedMatcher(index_params, search_params)

    matches = flann.knnMatch(fp1.desc, fp2.desc, k=2)

    # Need to draw only good matches, so create a mask
    matchesMask = [[0, 0] for _ in range(len(matches))]

    # ratio test as per Lowe's paper
    for i, (m, n) in enumerate(matches):
        if m.distance < 0.7 * n.distance:
            matchesMask[i] = [1, 0]

    draw_params = dict(
        singlePointColor=(0, 255, 0),
        matchesMask=matchesMask,
        flags=0,
    )

    img_matches = cv2.drawMatchesKnn(
        fp1.img, fp1.kp, fp2.img, fp2.kp, matches, None, **draw_params
    )

    cv2.imshow("Matches", img_matches)
    # cv2.waitKey(0)
    # cv2.destroyAllWindows()

def main():
    img1 = cv2.imread("fingerprint1.bmp", cv2.IMREAD_GRAYSCALE)
    img2 = cv2.imread("fingerprint2.bmp", cv2.IMREAD_GRAYSCALE)
    # img3 = cv2.imread("fingerprint3.bmp", cv2.IMREAD_GRAYSCALE)

    fp1 = Fingerprint(img1)
    fp2 = Fingerprint(img2)

    cv2.imshow("img1 result", fp1.result_img)
    cv2.imshow("img2 result", fp2.result_img)

   
    match_fingerprints(fp1, fp2)

    cv2.waitKey(0)
    cv2.destroyAllWindows()


if __name__ == "__main__":
    main()
